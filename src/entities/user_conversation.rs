//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

#[cfg(feature = "ssr")]
pub mod server {
    use sea_orm::entity::prelude::*;
    use crate::entities::prelude::UserConversation;

    #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
    #[sea_orm(table_name = "user_conversation")]
    pub struct Model {
        #[sea_orm(primary_key, auto_increment = false)]
        pub user_ids: i32,
        #[sea_orm(primary_key, auto_increment = false)]
        pub conversation_id: i32,
    }

    #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
    pub enum Relation {
        #[sea_orm(
            belongs_to = "crate::entities::conversation::server::Entity",
            from = "Column::ConversationId",
            to = "crate::entities::conversation::server::Column::Id",
            on_update = "Restrict",
            on_delete = "Cascade"
        )]
        Conversation,
        #[sea_orm(
            belongs_to = "crate::entities::users::server::Entity",
            from = "Column::UserIds",
            to = "crate::entities::users::server::Column::Id",
            on_update = "Restrict",
            on_delete = "Cascade"
        )]
        Users,
    }

    impl Related<crate::entities::conversation::server::Entity> for Entity {
        fn to() -> RelationDef {
            Relation::Conversation.def()
        }
    }

    impl Related<crate::entities::users::server::Entity> for Entity {
        fn to() -> RelationDef {
            Relation::Users.def()
        }
    }

    impl Linked for UserConversation {
        type FromEntity = Entity;

        type ToEntity = crate::entities::message::server::Entity;

        fn link(&self) -> Vec<RelationDef> {
            vec![
                crate::entities::conversation::server::Relation::Message.def(),
                crate::entities::message::server::Relation::Conversation.def(),
                crate::entities::seen_messages::server::Relation::Message.def(),
            ]
        }
    }

    impl ActiveModelBehavior for ActiveModel {}
}
